// Route parameter types for type-safe navigation
export interface RouteParams {
  courseId?: string;
  documentId?: string;
  userId?: string;
  studyAidId?: string;
}

// Route definition interface
export interface RouteDefinition {
  readonly path: string;
  readonly name: string;
  readonly params?: readonly string[];
  readonly description?: string;
}

// Frontend route constants - single source of truth for all navigation
export const FRONT_ROUTES = {
  // Main application routes
  HOME: {
    path: '/',
    name: 'Home',
    description: 'Landing page',
  },
  
  // Admin routes
  ADMIN: {
    path: '/admin',
    name: 'Admin',
    description: 'Administrative dashboard',
  },
  
  // Course management routes
  COURSES: {
    path: '/courses',
    name: 'Courses',
    description: 'Course listing and management',
  },
  COURSE_DETAIL: {
    path: '/courses/:courseId',
    name: 'Course Detail',
    params: ['courseId'],
    description: 'Individual course details and content',
  },
  
  // Document management routes
  DOCUMENTS: {
    path: '/documents',
    name: 'Documents',
    description: 'Document library and management',
  },
  DOCUMENT_DETAIL: {
    path: '/documents/:documentId',
    name: 'Document Detail', 
    params: ['documentId'],
    description: 'Individual document viewer and editor',
  },
  DOCUMENT_AI: {
    path: '/documents/:documentId/ai',
    name: 'Document AI Outputs',
    params: ['documentId'],
    description: 'Notes and flashcards generated by AI',
  },
  DOCUMENT_VIDEO: {
    path: '/documents/:documentId/video',
    name: 'Document Video',
    params: ['documentId'],
    description: 'Video playback for document',
  },
  
  // Study aids and AI features
  STUDY_AIDS: {
    path: '/study-aids',
    name: 'Study Aids',
    description: 'AI-generated study materials',
  },
  STUDY_AID_DETAIL: {
    path: '/study-aids/:studyAidId',
    name: 'Study Aid Detail',
    params: ['studyAidId'], 
    description: 'Individual study aid viewer',
  },
  
  // User management routes
  PROFILE: {
    path: '/profile',
    name: 'Profile',
    description: 'User profile and settings',
  },
  USER_DETAIL: {
    path: '/users/:userId',
    name: 'User Detail',
    params: ['userId'],
    description: 'User profile (admin view)',
  },
  
  // Authentication routes
  LOGIN: {
    path: '/login',
    name: 'Login',
    description: 'User authentication',
  },
  LOGOUT: {
    path: '/logout',
    name: 'Logout', 
    description: 'User logout',
  },
  
  // Integration routes
  CANVAS_SYNC: {
    path: '/canvas/sync',
    name: 'Canvas Sync',
    description: 'Canvas LMS integration sync',
  },
  
  // Settings routes
  SETTINGS: {
    path: '/settings',
    name: 'Settings',
    description: 'Application settings',
  },
} as const;

// Type for route keys
export type RouteKey = keyof typeof FRONT_ROUTES;

// Helper to build paths with parameters and type safety
export function buildPath(
  route: RouteDefinition, 
  params?: RouteParams
): string {
  let path = route.path;
  
  // Replace parameters if provided
  if (params && route.params) {
    route.params.forEach(param => {
      const value = params[param as keyof RouteParams];
      if (value) {
        path = path.replace(`:${param}`, value);
      }
    });
  }
  
  return path;
}

// Helper to validate that all required parameters are provided
export function validateRouteParams(
  route: RouteDefinition,
  params?: RouteParams
): boolean {
  if (!route.params) return true;
  
  if (!params) return false;
  
  return route.params.every(param => {
    const value = params[param as keyof RouteParams];
    return value !== undefined && value !== null && value !== '';
  });
}

// Helper to extract parameters from a path
export function extractParams(
  route: RouteDefinition,
  currentPath: string
): RouteParams | null {
  if (!route.params) return {};
  
  // Create regex from route path
  const regexPath = route.path.replace(/:[^/]+/g, '([^/]+)');
  const regex = new RegExp(`^${regexPath}$`);
  
  const match = currentPath.match(regex);
  if (!match) return null;
  
  const params: RouteParams = {};
  route.params.forEach((param, index) => {
    (params as any)[param] = match[index + 1];
  });
  
  return params;
}

// Helper to check if a route matches a path
export function matchesRoute(
  route: RouteDefinition,
  currentPath: string
): boolean {
  if (!route.params) {
    return route.path === currentPath;
  }
  
  const regexPath = route.path.replace(/:[^/]+/g, '[^/]+');
  const regex = new RegExp(`^${regexPath}$`);
  
  return regex.test(currentPath);
}

// Get all routes as an array for iteration
export function getAllRoutes(): RouteDefinition[] {
  return Object.values(FRONT_ROUTES);
}

// Get routes by category helper
export function getRoutesByCategory() {
  return {
    main: [FRONT_ROUTES.HOME, FRONT_ROUTES.ADMIN],
    courses: [FRONT_ROUTES.COURSES, FRONT_ROUTES.COURSE_DETAIL],
    documents: [FRONT_ROUTES.DOCUMENTS, FRONT_ROUTES.DOCUMENT_DETAIL],
    studyAids: [FRONT_ROUTES.STUDY_AIDS, FRONT_ROUTES.STUDY_AID_DETAIL],
    user: [FRONT_ROUTES.PROFILE, FRONT_ROUTES.USER_DETAIL],
    auth: [FRONT_ROUTES.LOGIN, FRONT_ROUTES.LOGOUT],
    integration: [FRONT_ROUTES.CANVAS_SYNC],
    settings: [FRONT_ROUTES.SETTINGS],
  };
}

export default FRONT_ROUTES;
