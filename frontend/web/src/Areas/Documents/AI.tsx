import { useEffect, useMemo, useState } from 'react';
import { TalvraSurface, TalvraStack, TalvraText, TalvraCard, TalvraButton, SectionHeader, CodeBlock, PageContainer, PageSection, Text as UiText } from '@ui';
import { useParams } from 'react-router-dom';

const API_BASE: string = (import.meta as any).env?.VITE_API_BASE ?? 'http://localhost:3001';

async function fetchJSON<T>(url: string, init?: RequestInit): Promise<T> {
  const headers: Record<string, string> = { ...(init?.headers as any) };
  if (init?.body && !Object.keys(headers).some((k) => k.toLowerCase() === 'content-type')) {
    headers['content-type'] = 'application/json';
  }
  const res = await fetch(url, { credentials: 'include', ...init, headers });
  if (!res.ok) throw new Error(await res.text().catch(() => `HTTP ${res.status}`));
  return (await res.json()) as T;
}

export default function DocumentAI() {
  const { documentId } = useParams<{ documentId: string }>();
  const [notes, setNotes] = useState<string | null>(null);
  interface Flashcard { q: string; a: string; hint?: string; source?: string | string[] }
  const [cards, setCards] = useState<Flashcard[] | null>(null);
  const [cardIdx, setCardIdx] = useState(0);
  const [showAnswer, setShowAnswer] = useState(false);
  const [showHint, setShowHint] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [busy, setBusy] = useState(false);

  const resultUrl = useMemo(() => `${API_BASE}/api/ai/result/${encodeURIComponent(documentId || '')}`, [documentId]);

  async function startAI() {
    setBusy(true);
    setError(null);
    try {
      await fetchJSON(`${API_BASE}/api/ai/start`, {
        method: 'POST',
        body: JSON.stringify({ doc_id: documentId }),
      });
      await load();
    } catch (e: any) {
      setError(String(e?.message || e));
    } finally {
      setBusy(false);
    }
  }

  async function load() {
    setError(null);
    setNotes(null);
    setCards(null);
    try {
      const res = await fetchJSON<{ ok: true; outputs: { notes: string; flashcards: string } }>(resultUrl);
      const [notesText, cardsJson] = await Promise.all([
        fetch(`${API_BASE}${res.outputs.notes}`, { credentials: 'include' }).then((r) => r.text()),
        fetch(`${API_BASE}${res.outputs.flashcards}`, { credentials: 'include' }).then((r) => r.json()),
      ]);
      setNotes(notesText);
      // Normalize cards: ensure array of {q,a,hint?,source?}
      const arr: Flashcard[] = Array.isArray(cardsJson)
        ? (cardsJson as Flashcard[])
        : (Array.isArray((cardsJson as any)?.flashcards) ? (cardsJson as any).flashcards : []);
      setCards(arr);
      setCardIdx(0);
      setShowAnswer(false);
      setShowHint(false);
    } catch (e: any) {
      setError(String(e?.message || e));
    }
  }

  useEffect(() => {
    if (documentId) void load();
  }, [documentId]);

  return (
    <TalvraSurface>
      <PageContainer>
      <TalvraStack>
<SectionHeader title={`AI Outputs: ${documentId ?? ''}`} subtitle="Notes and flashcards generated by AI." />
        {error && <TalvraText>Error: {error}</TalvraText>}

        <TalvraButton disabled={busy} onClick={startAI}>
          {busy ? 'Starting…' : 'Start AI'}
        </TalvraButton>

        <PageSection>
        <TalvraCard>
          <TalvraStack>
            <TalvraText as="h3">Notes</TalvraText>
<CodeBlock>
              {notes ?? 'No notes yet.'}
            </CodeBlock>
          </TalvraStack>
        </TalvraCard>

        </PageSection>
        <PageSection>
        <TalvraCard>
          <TalvraStack>
            <TalvraText as="h3">Flashcards</TalvraText>
            {!cards || cards.length === 0 ? (
              <TalvraText>No flashcards yet.</TalvraText>
            ) : (
              <TalvraStack>
                <UiText color="gray-500">
                  Card {cardIdx + 1} of {cards.length}
                </UiText>
                <TalvraCard>
                  <TalvraStack>
                    <TalvraText as="h4">Q: {cards[cardIdx].q}</TalvraText>
                    {cards[cardIdx].hint && (
                      <UiText color="gray-500">
                        {showHint ? `Hint: ${cards[cardIdx].hint}` : 'Hint: •••'}
                      </UiText>
                    )}
                    {showAnswer && (
                      <TalvraText>
                        A: {cards[cardIdx].a}
                      </TalvraText>
                    )}
                    {showAnswer && cards[cardIdx].source && (
                      <UiText color="gray-500">
                        Source: {Array.isArray(cards[cardIdx].source) ? cards[cardIdx].source.join(', ') : cards[cardIdx].source}
                      </UiText>
                    )}
                    <TalvraStack>
                      <TalvraButton onClick={() => setShowHint((v) => !v)}>
                        {showHint ? 'Hide hint' : 'Show hint'}
                      </TalvraButton>
                      <TalvraButton onClick={() => setShowAnswer((v) => !v)}>
                        {showAnswer ? 'Hide answer' : 'Show answer'}
                      </TalvraButton>
                    </TalvraStack>
                  </TalvraStack>
                </TalvraCard>
                <TalvraStack>
<TalvraButton
                    onClick={() => {
                      setCardIdx((i) => (i - 1 + cards.length) % cards.length);
                      setShowAnswer(false);
                      setShowHint(false);
                    }}
                    variant="secondary"
                  >
                    Previous
                  </TalvraButton>
<TalvraButton
                    onClick={() => {
                      setCardIdx((i) => (i + 1) % cards.length);
                      setShowAnswer(false);
                      setShowHint(false);
                    }}
                    variant="secondary"
                  >
                    Next
                  </TalvraButton>
                </TalvraStack>
              </TalvraStack>
            )}
          </TalvraStack>
        </TalvraCard>

        </PageSection>
        <PageSection>
        <TalvraButton as="a" href={`/documents/${documentId}`} variant="ghost">Back to Document</TalvraButton>
        </PageSection>
      </TalvraStack>
      </PageContainer>
    </TalvraSurface>
  );
}

