{
  "task_plan_version": "1.0",
  "phases": [
    {
      "name": "Phase 0 - Repo and CI basics",
      "tasks": [
        {
          "id": "T000",
          "title": "Initialize monorepo and workspace",
          "branch": "tooling/init-monorepo",
          "paths": ["package.json", "pnpm-workspace.yaml", ".editorconfig", ".gitignore", "README.md"],
          "steps": [
            "Create pnpm workspace and root scripts",
            "Add README with alias guidance"
          ],
          "run": ["pnpm install"],
          "acceptance": [
            "pnpm install succeeds",
            "pnpm -r list shows workspace"
          ],
          "pr": {
            "title": "chore(repo) init pnpm workspace and repo meta",
            "body": "Why: set foundation for multi apps. What changed: workspace files. Tests: install ok."
          },
          "completed": true
        },
        {
          "id": "T001",
          "title": "Add CI workflow skeleton",
          "branch": "tooling/ci-skeleton",
          "paths": [".github/workflows/ci.yml"],
          "steps": ["Add checkout and pnpm install steps"],
          "run": [],
          "acceptance": ["CI runs and passes on PR"],
          "pr": {
            "title": "ci: add workflow skeleton",
            "body": "Why: early CI feedback. Tests: green run on PR."
          },
          "completed": true
        },
        {
          "id": "T002",
          "title": "Process handbook and validator",
          "branch": "tooling/process-handbook",
          "paths": ["docs/process.md", "docs/process.json", "scripts/validate-process-json.ts", "package.json", ".github/workflows/ci.yml"],
          "steps": [
            "Add handbook and JSON",
            "Create zod validator and pnpm script",
            "Call validator in CI"
          ],
          "run": ["pnpm add -D tsx zod", "pnpm run validate:process"],
          "acceptance": ["Validator prints process.json valid", "CI runs validator"],
          "pr": {
            "title": "docs(process) add handbook and JSON with validator",
            "body": "Why: single source of truth and guard. Tests: validator pass and CI hook."
          },
          "completed": true
        }
      ]
    },
    {
      "name": "Phase 1 - Frontend base you can run",
      "tasks": [
        {
          "id": "T010",
          "title": "Scaffold Vite React app and structure",
          "branch": "web/scaffold",
          "paths": ["apps/web/**", "packages/configs/**", "tsconfig.base.json"],
          "steps": [
            "Create Vite React TS app under apps/web",
            "Add aliases and Areas folders",
            "Add AppProvider, AppRoutes, routes.ts"
          ],
          "run": ["pnpm --filter web dev"],
          "acceptance": ["Dev server renders Admin page"],
          "pr": {
            "title": "feat(web) scaffold Vite app with Areas and routes skeleton",
            "body": "What: Vite app, routes, Areas. Tests: dev server shows Admin."
          },
          "completed": true
        },
        {
          "id": "T011",
          "title": "Shared UI primitives package",
          "branch": "web/ui-primitives",
          "paths": ["packages/talvra-ui/**", "apps/web/.eslintrc.cjs", "packages/configs/.eslintrc.base.cjs"],
          "steps": [
            "Add styled-components primitives",
            "Enforce no raw tags in Areas with ESLint override"
          ],
          "run": ["pnpm -r lint"],
          "acceptance": ["Admin renders with @ui only", "Lint fails on raw tag usage"],
          "pr": {
            "title": "feat(ui) add Talvra UI primitives and lint guard",
            "body": "What: primitives and guard. Tests: render Admin, lint check."
          },
          "completed": true
        },
        {
          "id": "T012",
          "title": "Frontend route constants as source of truth",
          "branch": "frontend/route-constants",
          "paths": ["packages/talvra-routes/**", "apps/web/src/app/routes.ts"],
          "steps": [
            "Create shared package talvra-routes",
            "Move FRONT_ROUTES and buildPath to shared package",
            "Re-export from apps/web/src/app/routes.ts"
          ],
          "run": ["pnpm --filter web build"],
          "acceptance": ["Navigation via constants works"],
          "pr": {
            "title": "feat(routes): T012 - extract route constants to shared package",
            "body": "What: shared package with constants and helpers. Tests: type-check + build from web."
          },
          "completed": true
        },
        {
          "id": "T013",
          "title": "React Query and useAPI hook package",
          "branch": "frontend/use-api",
          "paths": ["packages/talvra-api/**", "apps/web/src/app/AppProvider.tsx"],
          "steps": [
            "Add QueryClientProvider",
            "Implement generic useAPI for GET"
          ],
          "run": ["pnpm --filter web build"],
          "acceptance": ["App builds and provider is wired globally"],
          "pr": {
            "title": "feat(api): T013 - scaffold talvra-api with useAPI and QueryClientProvider",
            "body": "What: shared useAPI + QueryClientProvider integration. Tests: type-check + web build."
          },
          "completed": true
        },
        {
          "id": "T014",
          "title": "Shared hooks package",
          "branch": "frontend/hooks",
          "paths": ["packages/talvra-hooks/**", "web/vite.config.ts"],
          "steps": [
            "Scaffold talvra-hooks with useDebouncedValue, useEvent, useIsMounted",
            "Fix Vite aliases to shared package index"
          ],
          "run": ["pnpm --filter web build"],
          "acceptance": ["Web builds using @hooks alias"],
          "pr": {
            "title": "feat(hooks): T014 - scaffold talvra-hooks and fix Vite aliases",
            "body": "What: hooks package and Vite alias fixes. Tests: build passes."
          },
          "completed": true
        },
        {
          "id": "T015",
          "title": "Design tokens and app constants",
          "branch": "frontend/constants",
          "paths": ["packages/talvra-constants/**", "web/src/app/AppProvider.tsx"],
          "steps": [
            "Scaffold talvra-constants with tokens and app constants",
            "Compose app theme using @ui theme + @constants tokens"
          ],
          "run": ["pnpm --filter web build"],
          "acceptance": ["Build passes with tokens consumed in app theme"],
          "pr": {
            "title": "feat(constants): T015 - add talvra-constants and compose app theme with tokens",
            "body": "What: tokens package and theme composition. Tests: build passes."
          },
          "completed": true
        }
      ]
    },
    {
      "name": "Phase 2 - Backend base you can run",
      "tasks": [
        {
          "id": "T020",
          "title": "Docker compose for local stack",
          "branch": "infra/compose-base",
          "paths": ["infra/docker-compose.yml", "infra/redis/**", "infra/azurite/**", ".env.example"],
          "steps": [
            "Add Postgres or Neon connection, Redis, Azurite",
            "Document ports and env"
          ],
          "run": ["docker compose -f infra/docker-compose.yml up -d"],
          "acceptance": ["All containers healthy"],
          "pr": {
            "title": "infra: add compose for Postgres Redis Azurite",
            "body": "What: compose file and env. Tests: services healthy."
          },
          "completed": true
        },
        {
          "id": "T021",
          "title": "API Gateway service skeleton",
          "branch": "backend/gateway-skeleton",
          "paths": ["services/api-gateway/**"],
          "steps": [
            "Create Node TS service",
            "GET /health returns ok true and request id"
          ],
          "run": ["pnpm --filter ./services/api-gateway dev"],
          "acceptance": [ "curl localhost:3001/health returns ok true" ],
          "pr": {
            "title": "feat(gateway) skeleton with health and request id",
            "body": "What: service base and health. Tests: curl ok."
          },
          "completed": true
        },
        {
          "id": "T022",
          "title": "Auth service skeleton",
          "branch": "backend/auth-skeleton",
          "paths": ["services/auth-service/**", "migrations/auth/**"],
          "steps": [
            "Add users and sessions migrations",
            "Implement signup, login, session endpoints"
          ],
          "run": ["pnpm --filter ./services/auth-service dev"],
          "acceptance": ["Signup and login work against Postgres"],
          "pr": {
            "title": "feat(auth) service skeleton and basic auth endpoints",
            "body": "What: endpoints and migrations. Tests: signup and login curl."
          },
          "completed": true
        },
        {
          "id": "T023",
          "title": "Gateway to Auth integration with cookies",
          "branch": "backend/gateway-auth-integration",
          "paths": ["services/api-gateway/**"],
          "steps": [
            "Proxy /auth/* to Auth",
            "Set and read HttpOnly cookie"
          ],
          "run": ["pnpm --filter ./services/api-gateway dev"],
          "acceptance": ["Login through gateway sets session"],
          "pr": {
            "title": "feat(gateway) proxy auth and session cookies",
            "body": "What: reverse proxy and cookie handling."
          },
          "completed": true
        }
      ]
    },
    {
      "name": "Phase 3 - Canvas integration with fixtures first",
      "tasks": [
        {
          "id": "T030",
          "title": "Canvas service skeleton and fixtures",
          "branch": "backend/canvas-skeleton",
          "paths": ["services/canvas-service/**", "migrations/canvas/**"],
          "steps": [
            "Add courses and assignments tables",
            "Sync from fixture JSON and expose GET endpoints"
          ],
          "run": ["pnpm --filter ./services/canvas-service dev"],
          "acceptance": ["GET /canvas/courses returns fixture data"],
          "pr": {
            "title": "feat(canvas) service skeleton with fixture sync",
            "body": "What: tables and endpoints. Tests: sync then read."
          },
          "completed": true
        },
        {
          "id": "T031",
          "title": "Gateway proxies Canvas routes",
          "branch": "backend/gateway-canvas-proxy",
          "paths": ["services/api-gateway/**"],
          "steps": ["Proxy /canvas/* to canvas service"],
          "run": [],
          "acceptance": ["Frontend can call /api/canvas/courses via gateway"],
          "pr": {
            "title": "feat(gateway) proxy canvas routes",
            "body": "What: proxy rules."
          },
          "completed": true
        },
        {
          "id": "T032",
          "title": "Frontend Courses list page",
          "branch": "web/courses-list",
          "paths": ["apps/web/src/Areas/Courses/**", "packages/talvra-routes/**"],
          "steps": [
            "Add GET_ALL_COURSES route constant",
            "Create useTalvraCourses and render list"
          ],
          "run": ["pnpm --filter web dev"],
          "acceptance": ["Visiting /courses shows fixture list"],
          "pr": {
            "title": "feat(web) courses list using useAPI and route constants",
            "body": "What: hook and list. Tests: manual route visit."
          },
          "completed": true
        },
        {
          "id": "T033",
          "title": "Canvas API integration using user-provided token (no OAuth)",
          "branch": "backend/canvas-token-integration",
          "paths": ["services/auth-service/**", "services/canvas-service/**"],
          "steps": [
            "Add users.canvas_token_enc column (pgcrypto)",
            "Extend signup/PUT endpoint to set encrypted token (and optional base URL)",
            "Canvas-service reads token for current session user and calls /api/v1/courses",
            "Fallback to fixtures when token missing; error on 401/403"
          ],
          "run": ["Set CANVAS_TOKEN_SECRET and CANVAS_BASE_URL in .env, then request /api/canvas/courses"],
          "acceptance": [
            "With a valid token, /api/canvas/courses returns real Canvas courses",
            "Token is never returned in responses and is stored encrypted"
          ],
          "pr": {
            "title": "feat(canvas) token-based Canvas API integration (no OAuth)",
            "body": "What: encrypted token storage and Canvas client; How: user supplies token; Fallback: fixtures when missing."
          },
          "completed": true
        },
      ]
    },
    {
      "name": "Phase 4 - Ingestion pipeline start",
      "tasks": [
        {
          "id": "T040",
          "title": "Ingestion service skeleton and Redis stream",
          "branch": "backend/ingestion-skeleton",
          "paths": ["services/ingestion-service/**", "migrations/documents/**"],
          "steps": [
            "Add documents table and endpoints",
            "Publish ingest.request on start"
          ],
          "run": ["pnpm --filter ./services/ingestion-service dev"],
          "acceptance": ["POST /ingestion/start enqueues a message"],
          "pr": {
            "title": "feat(ingestion) service skeleton with Redis stream",
            "body": "What: endpoints and queue."
          },
          "completed": true
        },
        {
          "id": "T041",
          "title": "Extract PDF and DOCX to Markdown and JSON",
          "branch": "backend/ingestion-extractor",
          "paths": ["services/ingestion-service/src/**"],
          "steps": [
            "Adapters for pdf and docx",
            "Write markdown and structure.json to Blob"
          ],
          "run": ["curl -X POST /ingestion/start with fixture"],
          "acceptance": ["Blob urls exist and document row updated"],
          "pr": {
            "title": "feat(ingestion) extract PDF and DOCX to md and json",
            "body": "What: adapters and storage. Tests: fixture run."
          },
          "completed": true
        },
        {
          "id": "T042",
          "title": "Frontend document view page",
          "branch": "web/documents-view",
          "paths": ["apps/web/src/Areas/Courses/**", "packages/talvra-routes/**"],
          "steps": [
            "Routes to fetch documents and notes",
            "Render document title and blob links"
          ],
          "run": ["pnpm --filter web dev"],
          "acceptance": ["Document screen shows links after processing"],
          "pr": {
            "title": "feat(web) document view screen",
            "body": "What: page and routes."
          },
          "completed": true
        },
        {
          "id": "T043",
          "title": "Ingestion storage provider (LocalFs + Azure Blob/Azurite)",
          "branch": "backend/ingestion-storage",
          "paths": ["services/ingestion-service/**", "infra/.env.example"],
          "steps": [
            "Add StorageProvider interface and LocalFs/Azure adapters",
            "Write originals and artifacts to provider",
            "Return gateway/SAS URLs from result endpoint",
            "Document Azurite/Azure env in infra/.env.example",
            "Use Docker DNS host 'azurite' in AZURE_STORAGE_CONNECTION_STRING (BlobEndpoint http://azurite:10000/devstoreaccount1) so containers do not target 127.0.0.1"
          ],
          "run": ["docker compose -f infra/docker-compose.yml up -d --build ingestion-service"],
          "acceptance": [
            "Extraction writes blobs to Azurite when configured, LocalFs otherwise",
            "/api/ingestion/result/:doc_id returns fetchable URLs",
            "In Docker, ingestion-service connects to Azurite via host 'azurite' (no 127.0.0.1/localhost usage)"
          ],
          "pr": {
            "title": "feat(ingestion): T043 pluggable storage (LocalFs + Azure Blob/Azurite)",
            "body": "What: storage abstraction and Azure adapter. How: env selects provider. Tests: Azurite run and fetch URLs."
          },
          "completed": true
        },
        {
          "id": "T044",
          "title": "Ingestion: support TXT/MD, HTML-to-text, and PPTX extraction",
          "branch": "backend/ingestion-more-types",
          "paths": ["services/ingestion-service/**", "infra/.env.example"],
          "steps": [
            "Add .txt and .md extractors (plain text passthrough to markdown)",
            "Add .html extraction (HTML to text; strip tags, preserve headings/links where possible)",
            "Add .pptx extraction (extract slide text)",
            "Surface unsupported file errors clearly and skip cleanly in Canvas sync",
            "Update docs and .env example as needed"
          ],
          "run": ["pnpm --filter ./services/ingestion-service build", "curl -X POST /api/ingestion/start with sample files"],
          "acceptance": [
            "Uploading .txt, .md, .html, and .pptx yields content.md and structure.json",
            "Unsupported types are skipped with a clear message"
          ],
          "pr": {
            "title": "feat(ingestion): T044 add TXT/MD, HTML-to-text, and PPTX extractors",
            "body": "Why: broaden supported file types from Canvas. How: new extractors; graceful skips; docs updated."
          },
          "completed": true
        }
      ]
    },
    {
      "name": "Phase 5 - AI outputs",
      "tasks": [
        {
          "id": "T050",
          "title": "AI service skeleton with mock outputs",
          "branch": "backend/ai-skeleton",
          "paths": ["services/ai-service/**", "migrations/ai/**"],
          "steps": [
            "Tables for notes and flashcards",
            "POST /ai/start produces markdown and flashcards"
          ],
          "run": ["pnpm --filter ./services/ai-service dev"],
          "acceptance": ["Notes and flashcards stored and retrievable"],
          "pr": {
            "title": "feat(ai) service skeleton with mock outputs",
            "body": "What: endpoints and tables."
          },
          "completed": true
        },
        {
          "id": "T051",
          "title": "Frontend slides and flashcards",
          "branch": "web/slides-flashcards",
          "paths": ["apps/web/src/Areas/Courses/**"],
          "steps": [
            "Render slides with reveal.js",
            "Render flashcards with flip cards"
          ],
          "run": ["pnpm --filter web dev"],
          "acceptance": ["Slides and flashcards visible for a processed doc"],
          "pr": {
            "title": "feat(web) slides and flashcards views",
            "body": "What: pages wired to AI outputs."
          },
          "completed": true
        },
        {
          "id": "T052a",
          "title": "AI generation v1 behind flag + blob endpoints",
          "branch": "backend/ai-generation-v1",
          "paths": ["services/ai-service/**", "infra/.env.example", "services/api-gateway/**"],
          "steps": [
            "Add real OpenAI-powered generation for notes and flashcards (guarded by AI_GENERATION=real)",
            "Return gateway URLs from /ai/start and /ai/result, add blob endpoints to serve content",
            "Add OPENAI_CHAT_MODEL and ensure AI_OUTPUT_DIR paths resolve correctly"
          ],
          "run": [
            "docker compose -f infra/docker-compose.yml up -d --build ai-service",
            "curl -X POST /api/ai/start with markdown",
            "curl /api/ai/blob/:doc_id/notes and /api/ai/blob/:doc_id/flashcards via gateway"
          ],
          "acceptance": [
            "When AI_GENERATION=real and OPENAI_API_KEY is set, notes and flashcards are contextual",
            "Blob endpoints return correct content-types and data via the gateway",
            "When disabled or key missing, service falls back to stub outputs"
          ],
          "pr": {
            "title": "feat(ai): generation v1 behind flag + blob endpoints",
            "body": "Enable real OpenAI-powered notes/flashcards behind AI_GENERATION=real; expose blob endpoints and return gateway URLs."
          },
          "completed": true
        },
        {
          "id": "T052",
          "title": "AI pipeline v1: chunking, generation, and guardrails",
          "branch": "backend/ai-pipeline-v1",
          "paths": ["services/ai-service/**", "services/ingestion-service/**", "migrations/ai/**"],
          "steps": [
            "Chunk extracted markdown into sections with headings and references",
            "Generate study notes that guide learning without disclosing exam answers",
            "Generate high-quality flashcards (Q/A + hints) with source citations",
            "Persist versions with metadata and timestamps; mark deprecated when re-generated",
            "Add guardrails/prompting to avoid direct answers to graded questions"
          ],
          "run": ["pnpm --filter ./services/ai-service dev"],
          "acceptance": [
            "For a document, notes and flashcards are generated with source refs",
            "Content adheres to 'guide, not cheat' guardrails"
          ],
          "pr": {
            "title": "feat(ai) v1 pipeline with chunking, generation, and guardrails",
            "body": "What: chunking + real generation + persistence + guardrails."
          },
          "completed": false
        }
      ]
    },
    {
      "name": "Phase 6 - Media pipeline",
      "tasks": [
        {
          "id": "T060",
          "title": "Media service and TTS stub",
          "branch": "backend/media-skeleton",
          "paths": ["services/media-service/**", "migrations/media/**"],
          "steps": [
            "POST /media/start builds MP4 with stub TTS",
            "GET /media/:doc_id returns urls"
          ],
          "run": ["pnpm --filter ./services/media-service dev"],
          "acceptance": ["MP4 and thumbnail exist in Blob"],
          "pr": {
            "title": "feat(media) service skeleton with stub TTS",
            "body": "What: MP4 pipeline and storage."
          },
          "completed": true
        },
        {
          "id": "T061",
          "title": "Frontend video playback",
          "branch": "web/video-player",
          "paths": ["apps/web/src/Areas/Courses/**", "packages/talvra-ui/src/Video.tsx"],
          "steps": [
            "Add Video primitive",
            "Show MP4 on document screen"
          ],
          "run": ["pnpm --filter web dev"],
          "acceptance": ["Video plays in browser"],
          "pr": {
            "title": "feat(web) video playback for document",
            "body": "What: primitive and page."
          },
          "completed": false
        },
        {
          "id": "T062",
          "title": "Media pipeline v1: real TTS and video composition",
          "branch": "backend/media-pipeline-v1",
          "paths": ["services/media-service/**", "migrations/media/**"],
          "steps": [
            "Use real TTS provider (configurable) to generate audio from notes",
            "Compose slides + audio into video via ffmpeg, generate thumbnail",
            "Emit progress events and persist media metadata",
            "Store media in provider (Azure/Local) and return signed/gateway URLs"
          ],
          "run": ["pnpm --filter ./services/media-service dev"],
          "acceptance": [
            "Video composed from notes with real TTS",
            "Progress observable and metadata stored"
          ],
          "pr": {
            "title": "feat(media) v1: real TTS and composition pipeline",
            "body": "What: TTS + ffmpeg composition + metadata + storage."
          },
          "completed": false
        },
        {
          "id": "T063",
          "title": "Secure media delivery",
          "branch": "backend/media-secure-delivery",
          "paths": ["services/api-gateway/**", "services/media-service/**"],
          "steps": [
            "Serve media via signed URLs or gateway streaming with auth",
            "Harden CORS and cache headers"
          ],
          "run": [],
          "acceptance": ["Unauthenticated requests cannot access private media"],
          "pr": {
            "title": "feat(media) secure delivery",
            "body": "What: signed URLs/gateway streaming and auth."
          },
          "completed": false
        }
      ]
    },
    {
      "name": "Phase 7 - Search and reminders",
      "tasks": [
        {
          "id": "T070",
          "title": "Semantic search (RAG) over ingested content",
          "branch": "backend/search-embeddings",
          "paths": ["services/ai-service/**", "services/api-gateway/**", "services/ingestion-service/**"],
          "steps": [
            "Chunk markdown into passages with stable IDs and metadata (doc_id, course_id, assignment_id, page range)",
            "Compute embeddings for passages and store in RedisSearch or pgvector (configurable)",
            "Implement GET /search with query embeddings + filters (course/assignment/module)",
            "Return matches with excerpt, score, and source pointers"
          ],
          "run": ["curl \"/search?q=photosynthesis&course_id=123&assignment_id=456\""],
          "acceptance": [
            "Query returns expected passages with source metadata",
            "Filters by course/assignment reduce the result set appropriately"
          ],
          "pr": {
            "title": "feat(search) RAG-style search over passages with filters",
            "body": "What: chunking + embeddings + filtered retrieval."
          },
          "completed": false
        },
        {
          "id": "T070a",
          "title": "RAG scaffolding v0: per-doc embeddings and search (file-based)",
          "branch": "backend/rag-embeddings",
          "paths": ["services/ai-service/**", "infra/.env.example", "services/api-gateway/**", "README.md"],
          "steps": [
            "Add POST /ai/embed to chunk and embed markdown via OpenAI or deterministic fallback",
            "Add GET /ai/search to perform cosine similarity against stored vectors",
            "Fetch markdown from ingestion-service and store embeddings under AI_OUTPUT_DIR",
            "Document quickstart and ensure gateway/infra env are correct (Docker DNS names)"
          ],
          "run": [
            "curl -X POST /api/ingestion/start with sample PDF",
            "curl -X POST /api/ai/embed { doc_id }",
            "curl /api/ai/search?doc_id=...&q=..."
          ],
          "acceptance": [
            "Embeddings JSON file exists for doc_id",
            "Search returns snippets with reasonable scores"
          ],
          "pr": {
            "title": "feat(ai): RAG scaffolding v0 (/ai/embed, /ai/search) + docs",
            "body": "What: per-doc embeddings and search with OpenAI or fallback; docs and infra env defaults."
          },
          "completed": true
        },
        {
          "id": "T074",
          "title": "Canvas assignments endpoint and per-course documents filter",
          "branch": "backend/canvas-assignments-endpoint",
          "paths": ["services/canvas-service/**"],
          "steps": [
            "Extend GET /canvas/documents to accept course_id filter",
            "Add GET /canvas/assignments?course_id to fetch assignments via Canvas API"
          ],
          "run": ["curl /api/canvas/assignments?course_id=123"],
          "acceptance": [
            "/canvas/documents returns only documents for the course when filtered",
            "/canvas/assignments returns id,name,due_at,html_url for assignments"
          ],
          "pr": {
            "title": "feat(canvas): assignments endpoint + per-course documents filter",
            "body": "What: backend endpoints to support course detail UI."
          },
          "completed": true
        },
        {
          "id": "T075",
          "title": "Frontend course detail: documents and assignments",
          "branch": "web/course-docs-assignments",
          "paths": ["frontend/web/src/Areas/Courses/**", "frontend/web/src/app/AppRoutes.tsx"],
          "steps": [
            "Add /courses/:courseId route",
            "Show documents for course using /api/canvas/documents?course_id",
            "Show assignments for course using /api/canvas/assignments?course_id",
            "Link Courses list to course detail"
          ],
          "run": ["pnpm -C frontend --filter web dev"],
          "acceptance": [
            "Navigating to a course shows documents and assignments",
            "Document actions navigate to document detail/AI/Video"
          ],
          "pr": {
            "title": "feat(web): course detail with documents and assignments",
            "body": "What: new UI page; How: calls Canvas endpoints; Actions: links to doc pages."
          },
          "completed": true
        },
        {
          "id": "T076",
          "title": "Per-course sync endpoint and UI wiring",
          "branch": "backend/canvas-sync-course",
          "paths": ["services/canvas-service/**", "frontend/web/src/Areas/Courses/Detail.tsx"],
          "steps": [
            "Add POST /canvas/sync/course/:course_id to sync a single course",
            "Update Course Detail 'Sync now' button to call per-course endpoint and refresh lists"
          ],
          "run": ["curl -X POST /api/canvas/sync/course/123"],
          "acceptance": [
            "Per-course sync succeeds and new docs appear for that course only",
            "Course Detail 'Sync now' refreshes documents and assignments"
          ],
          "pr": {
            "title": "feat(canvas+web): per-course sync endpoint and Course Detail wiring",
            "body": "What: backend per-course sync + front wiring; Why: tighter UX control."
          },
          "completed": true
        },
        {
          "id": "T071",
          "title": "Notification service and reminders",
          "branch": "backend/notify-reminders",
          "paths": ["services/notification-service/**", "migrations/notifications/**"],
          "steps": [
            "Schedule email reminders from assignments",
            "Send test messages"
          ],
          "run": ["pnpm --filter ./services/notification-service dev"],
          "acceptance": ["A test reminder is sent to dev inbox"],
          "pr": {
            "title": "feat(notify) assignment reminders",
            "body": "What: scheduler and sender."
          },
          "completed": false
        },
        {
          "id": "T072",
          "title": "Reminders settings UI",
          "branch": "web/reminders-settings",
          "paths": ["apps/web/src/Areas/Admin/**"],
          "steps": [
            "Add settings form that calls notify API",
            "Persist and read settings"
          ],
          "run": ["pnpm --filter web dev"],
          "acceptance": ["Settings save and load correctly"],
          "pr": {
            "title": "feat(web) reminders settings UI",
            "body": "What: admin UI and routes."
          },
          "completed": false
        },
        {
          "id": "T073",
          "title": "Search UI with assignment scoping",
          "branch": "web/search-ui",
          "paths": ["apps/web/src/Areas/Search/**", "packages/talvra-routes/**"],
          "steps": [
            "Add search page with query input and filters (course/assignment/module)",
            "Display passage results with excerpts and source links"
          ],
          "run": ["pnpm --filter web dev"],
          "acceptance": ["Searching returns results scoped by selected assignment/course"],
          "pr": {
            "title": "feat(web) search UI scoped to course/assignment",
            "body": "What: search page + filters + results display."
          },
          "completed": false
        }
      ]
    },
    {
      "name": "Phase 7.5 - Document UX enhancements",
      "tasks": [
        {
          "id": "T077",
          "title": "Document Detail: Embed + Semantic Search UI",
          "branch": "web/doc-embed-search",
          "paths": ["frontend/web/src/Areas/Documents/Detail.tsx"],
          "steps": [
            "Add button to call POST /api/ai/embed for current document",
            "Add per-doc search input calling GET /api/ai/search?doc_id=...&q=...&k=...",
            "Render results with score and snippet"
          ],
          "run": ["Open /documents/:documentId, click Compute embeddings, then search"],
          "acceptance": [
            "Embeddings compute succeeds or returns skipped if already present",
            "Search returns top-k snippets for the doc and displays them"
          ],
          "pr": {
            "title": "feat(web): Document Detail embeds + semantic search UI",
            "body": "What: embed and search controls on Document Detail; How: calls ai-service endpoints via gateway."
          },
          "completed": true
        }
      ]
    },
    {
      "name": "Phase 8 - Canvas real OAuth and ingestion bridge",
      "tasks": [
        {
          "id": "T080",
          "title": "Canvas OAuth connect",
          "branch": "backend/canvas-oauth",
          "paths": ["services/canvas-service/**"],
          "steps": [
            "Implement real OAuth handshake",
            "Encrypt and store tokens"
          ],
          "run": ["pnpm --filter ./services/canvas-service dev"],
          "acceptance": ["Connect flow completes and tokens saved"],
          "pr": {
            "title": "feat(canvas) real OAuth and token storage",
            "body": "What: OAuth endpoints and crypto."
          },
          "completed": false
        },
        {
          "id": "T081",
          "title": "Canvas deep sync + ingestion bridge (assignments, modules, quizzes, attachments)",
          "branch": "backend/canvas-to-ingestion",
          "paths": ["services/canvas-service/**", "services/ingestion-service/**"],
          "steps": [
            "Sync courses, assignments, modules, quizzes, and module items",
            "Download new/updated attachments and pages; compute content hash",
            "Publish ingest.request for new content with course/assignment/module context",
            "Deduplicate by content hash and document identity"
          ],
          "run": ["Run sync and observe documents appear"],
          "acceptance": ["New files are processed end to end and linked to assignment/module context"],
          "pr": {
            "title": "feat(canvas) deep sync + ingestion bridge",
            "body": "What: deeper Canvas sync and event bridge with dedupe."
          },
          "completed": true
        },
        {
          "id": "T082",
          "title": "Auto-embed after Canvas sync",
          "branch": "backend/auto-embed-after-sync",
          "paths": ["services/canvas-service/**", "services/ai-service/**", "services/api-gateway/**"],
          "steps": [
            "Phase 1 (DONE): After successful ingestion of a Canvas document, trigger /ai/embed for the resulting doc_id",
            "Phase 2 (DONE): Ensure idempotency and retries (skip if embeddings already exist)",
            "Propagate request id and handle failures with logging",
            "Optionally batch embed to avoid rate limits"
          ],
          "run": ["Run /api/canvas/sync and verify embeddings are created automatically"],
          "acceptance": [
            "Following a sync, searching within the synced documents works without manual embedding",
            "No duplicate embeddings are created on re-sync"
          ],
          "pr": {
            "title": "feat(canvas+ai): auto-embed after Canvas sync",
            "body": "Wire canvas sync -> ingestion -> embeddings; idempotent and observable."
          },
          "completed": true
        },
        {
          "id": "T083",
          "title": "Canvas coverage: Course Files, assignment attachments, and Pages (HTML) ingestion",
          "branch": "backend/canvas-files-pages",
          "paths": ["services/canvas-service/**", "services/ingestion-service/**"],
          "steps": [
            "List and ingest Course Files via /api/v1/courses/:course_id/files (paginate)",
            "Attach Assignment attachments and ingest supported types",
            "Fetch Canvas Pages HTML via /api/v1/courses/:course_id/pages and convert to text",
            "Feature flags: CANVAS_SYNC_INCLUDE_FILES and CANVAS_SYNC_INCLUDE_PAGES",
            "Deduplicate by content hash, set doc_id stable scheme, trigger ingestion and embeddings"
          ],
          "run": ["POST /api/canvas/sync with flags enabled; observe documents increase"],
          "acceptance": [
            "Files and Pages appear as documents with correct course/module/assignment context where applicable",
            "Unsupported types are skipped cleanly; supported types are extracted and searchable"
          ],
          "pr": {
            "title": "feat(canvas): T083 expand coverage to Course Files, attachments, and Pages",
            "body": "Why: capture more learning materials. How: new sync surfaces with flags; HTML to text; ingestion+auto-embed."
          },
          "completed": true
        },
        {
          "id": "T084",
          "title": "Async Canvas sync V1: kickoff, worker, and status endpoints",
          "branch": "backend/canvas-sync-async",
          "paths": ["services/canvas-service/**", "services/api-gateway/**", "infra/.env.example"],
          "steps": [
            "Add POST /canvas/sync/start and POST /canvas/sync/course/:course_id/start that enqueue jobs and return 202 { job_id }",
            "Create Redis Streams consumer group worker in canvas-service to run existing sync logic in background",
            "Maintain job status in Redis hash canvas:sync:job:{job_id} (status, processed, skipped, errors, timestamps)",
            "Expose GET /canvas/sync/status/:job_id (polling) and coalesce duplicate jobs per user/course",
            "Plumb X-Request-Id and avoid storing tokens in payload; lookup token at run time"
          ],
          "run": [
            "curl -X POST /api/canvas/sync/course/123/start",
            "curl /api/canvas/sync/status/{job_id} until status=completed"
          ],
          "acceptance": [
            "Kickoff returns in <100ms with job_id",
            "Status transitions running -> completed or failed with counts",
            "No long-running HTTP sync endpoints remain"
          ],
          "pr": {
            "title": "feat(canvas): async sync kickoff + worker + status (no timeouts)",
            "body": "Why: avoid timeouts and let users continue working. How: enqueue to Redis Streams, background worker, status endpoint, idempotent coalescing, request-id propagation."
          },
          "completed": true
        },
        {
          "id": "T085",
          "title": "Frontend: async Canvas sync UI with progress",
          "branch": "web/async-sync-ui",
          "paths": ["frontend/web/src/Areas/Courses/**"],
          "steps": [
            "Update Course Detail Sync button to call /api/canvas/sync/course/:course_id/start (kickoff)",
            "Poll GET /api/canvas/sync/status/:job_id every 1–2s and render progress banner",
            "Disable Sync while job is running; on completion, refresh documents and assignments and show toast",
            "Optional: show a lightweight background jobs indicator so users can navigate away"
          ],
          "run": ["Open a course, click Sync, observe progress and completion without waiting on a long request"],
          "acceptance": [
            "UI returns immediately after kickoff and shows progress",
            "On completion, data refreshes and a toast appears",
            "Sync button is disabled during an active job for that course"
          ],
          "pr": {
            "title": "feat(web): async Canvas sync UI with progress",
            "body": "What: kickoff + polling progress banner on Course Detail; disables sync while running; refresh on completion."
          },
          "completed": true
        },
        {
          "id": "T086",
          "title": "Frontend: Settings page async Canvas sync UI with progress",
          "branch": "web/settings-async-sync-ui",
          "paths": ["frontend/web/src/Areas/Admin/**"],
          "steps": [
            "Switch Settings page sync to POST /api/canvas/sync/start",
            "Persist job_id in localStorage and poll GET /api/canvas/sync/status/:job_id",
            "Disable sync while running and show status banner consistent with Course Detail"
          ],
          "run": ["Open Settings, click Sync, observe immediate return and progress banner"],
          "acceptance": [
            "Settings sync returns immediately with job_id and shows progress",
            "Progress persists on reload via localStorage job_id until completion",
            "Button is disabled while an active job is running"
          ],
          "pr": {
            "title": "feat(web): Settings page uses async Canvas sync with polling",
            "body": "Switch Settings to kickoff endpoint, add progress banner and persistence matching Course Detail."
          },
          "completed": true
        }
      ]
    },
    {
      "name": "Phase 9 - Logging and observability",
      "tasks": [
        {
          "id": "T090",
          "title": "Logging service with Postgres storage",
          "branch": "backend/logging-service",
          "paths": ["services/logging-service/**", "migrations/logs/**"],
          "steps": [
            "POST /logs inserts rows",
            "Simple query endpoint"
          ],
          "run": ["pnpm --filter ./services/logging-service dev"],
          "acceptance": ["Logs written and retrievable by request id"],
          "pr": {
            "title": "feat(logs) structured logs service and storage",
            "body": "What: endpoint and schema."
          },
          "completed": false
        },
        {
          "id": "T091",
          "title": "Request id propagation",
          "branch": "backend/request-id-plumbing",
          "paths": ["services/**"],
          "steps": [
            "Gateway generates X-Request-Id",
            "Downstream logs include it"
          ],
          "run": [],
          "acceptance": ["One request is traceable across services"],
          "pr": {
            "title": "chore(observability) request id propagation",
            "body": "What: header and logging."
          },
          "completed": false
        }
      ]
    },
    {
      "name": "Phase 10 - Compliance and hardening",
      "tasks": [
        {
          "id": "T100",
          "title": "Rate limits and unified error model",
          "branch": "backend/rate-limits-errors",
          "paths": ["services/api-gateway/**", "services/**"],
          "steps": [
            "Apply rate limits per process.json",
            "Return unified error shape"
          ],
          "run": ["Abuse an endpoint and see 429 with Retry-After"],
          "acceptance": ["Error responses include request_id and codes"],
          "pr": {
            "title": "chore(security) rate limits and unified error shape",
            "body": "What: middlewares and handlers."
          },
          "completed": false
        },
        {
          "id": "T101",
          "title": "Data retention jobs",
          "branch": "backend/retention-jobs",
          "paths": ["services/**"],
          "steps": [
            "Jobs to prune old logs and blobs",
            "Dry run and then prune"
          ],
          "run": ["Run job and verify counts then deletes"],
          "acceptance": ["Old data removed safely in dev"],
          "pr": {
            "title": "chore(data) retention jobs for logs and blobs",
            "body": "What: scheduled tasks."
          },
          "completed": false
        }
      ]
    },
    {
      "name": "Phase 11 - Codegen and sync",
      "tasks": [
        {
          "id": "T110",
          "title": "OpenAPI in gateway and frontend codegen scripts",
          "branch": "tooling/openapi-codegen",
          "paths": ["services/api-gateway/**", "packages/talvra-routes/**", "packages/talvra-api/**", "scripts/**"],
          "steps": [
            "Serve /openapi.json",
            "Generate route constants and types for frontend"
          ],
          "run": ["pnpm run codegen"],
          "acceptance": ["Generated files updated and build passes"],
          "pr": {
            "title": "tooling: OpenAPI and frontend codegen",
            "body": "What: spec and generator."
          },
          "completed": false
        }
      ]
    },
    {
      "name": "Phase 12 - Polishing and e2e",
      "tasks": [
        {
          "id": "T123",
          "title": "UI polish v1: theme-based primitives, inputs, loading, and animations",
          "branch": "web/ui-polish-v1",
          "paths": [
            "frontend/packages/talvra-ui/**",
            "frontend/web/src/app/AppRoutes.tsx",
            "frontend/web/src/Areas/Documents/Detail.tsx",
            "frontend/web/src/components/CanvasTokenSettings.tsx",
            "frontend/web/src/Areas/Courses/Detail.tsx"
          ],
          "steps": [
            "Style primitives (Surface, Card, Button, Link, Text) with theme tokens and transitions",
            "Add Input, CodeBlock, and Loading components to @ui and export",
            "Replace raw inputs and pre tags with @ui components per guidelines",
            "Use animated Loading in Suspense fallbacks; reduce inline styles"
          ],
          "run": [
            "pnpm -C frontend/web install",
            "pnpm -C frontend/web build",
            "pnpm -C frontend/web dev"
          ],
          "acceptance": [
            "Core pages render with the updated theme and animated interactions",
            "No raw input/pre tags remain in Areas; @ui components are used",
            "Suspense fallbacks show the spinner from @ui"
          ],
          "pr": {
            "title": "feat(web+ui): T123 UI polish v1 (theme, inputs, loading, animations)",
            "body": "Why: improve UX and follow UI guidelines. What: themed primitives; new Input/CodeBlock/Loading; pages updated; animations added."
          },
          "completed": true
        },
        {
          "id": "T124",
          "title": "UI overhaul v2: AppLayout with glass header + Dashboard landing page",
          "branch": "web/ui-overhaul-v2",
          "paths": [
            "frontend/packages/talvra-ui/src/GlassPanel.tsx",
            "frontend/packages/talvra-ui/src/index.ts",
            "frontend/web/src/components/AppLayout.tsx",
            "frontend/web/src/app/AppRoutes.tsx",
            "frontend/web/src/Areas/Admin/index.tsx"
          ],
          "steps": [
            "Add GlassPanel primitive with backdrop blur",
            "Create AppLayout: sticky glass header, brand, and primary navigation",
            "Wrap all routes in AppLayout for consistent navigation",
            "Replace Admin with Dashboard: quick actions (Sync, Courses, Documents, Settings) and Recent Documents"
          ],
          "run": [
            "pnpm -C frontend/web build",
            "pnpm -C frontend/web dev"
          ],
          "acceptance": [
            "A glass header with clear navigation appears on every page",
            "Dashboard shows quick actions and recent documents",
            "Navigation between Dashboard, Courses, Documents, Settings is intuitive and consistent"
          ],
          "pr": {
            "title": "feat(web+ui): T124 AppLayout (glass) + Dashboard landing page",
            "body": "Apple-like glass header, clear navigation, and a functional dashboard."
          },
          "completed": true
        },
        {
          "id": "T120",
          "title": "End to end demo with seeds",
          "branch": "demo/e2e-flow",
          "paths": ["scripts/seed/**", "README.md"],
          "steps": [
            "Seed student, course, and sample PDF",
            "One command that runs stack and produces outputs"
          ],
          "run": ["pnpm run demo:e2e"],
          "acceptance": ["Demo brings up UI and shows processed study aids"],
          "pr": {
            "title": "feat(demo) one command e2e with sample content",
            "body": "What: seeds and demo script."
          },
          "completed": false
        },
        {
          "id": "T121",
          "title": "Accessibility pass on core pages",
          "branch": "web/a11y-pass",
          "paths": ["apps/web/**", "packages/talvra-ui/**"],
          "steps": [
            "Add labels and roles",
            "Ensure visible focus and contrast"
          ],
          "run": ["Automated a11y checks on Admin and Courses"],
          "acceptance": ["Checks pass on core pages"],
          "pr": {
            "title": "chore(web) a11y improvements on core pages",
            "body": "What: focus, labels, roles."
          },
          "completed": false
        },
        {
          "id": "T122",
          "title": "Performance pass and lazy chunks",
          "branch": "web/perf-chunks",
          "paths": ["apps/web/**"],
          "steps": [
            "Lazy load Areas",
            "Reduce initial bundle"
          ],
          "run": ["Analyze bundle and confirm budgets"],
          "acceptance": [
            "First load under 200 kb gzip",
            "Route chunks under 100 kb"
          ],
          "pr": {
            "title": "chore(web) code split Areas and tune bundles",
            "body": "What: lazy routes and cleanup."
          },
          "completed": false
        }
      ]
    }
  ]
}