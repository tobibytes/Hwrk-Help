# Postgres
POSTGRES_USER=talvra
POSTGRES_PASSWORD=talvra
POSTGRES_DB=talvra
POSTGRES_PORT=5432
# IMPORTANT: Use Docker DNS name for host so other containers can connect
DATABASE_URL=postgresql://talvra:talvra@postgres:5432/talvra

# Redis
REDIS_PORT=6379

# Azurite (Azure Blob emulator)
AZURITE_BLOB_PORT=10000

# API Gateway
API_GATEWAY_HOST=0.0.0.0
API_GATEWAY_PORT=3001
FRONTEND_ORIGIN=http://localhost:5173

# Services
AUTH_SERVICE_HOST=0.0.0.0
AUTH_SERVICE_PORT=4001
# Prefer Docker DNS to avoid localhost issues inside containers
AUTH_SERVICE_URL=http://auth-service:4001
CANVAS_SERVICE_HOST=0.0.0.0
CANVAS_SERVICE_PORT=4002
CANVAS_SERVICE_URL=http://canvas-service:4002

# Notification service
NOTIFY_SERVICE_HOST=0.0.0.0
NOTIFY_SERVICE_PORT=4040
NOTIFY_SERVICE_URL=http://notification-service:4040
# SMTP (optional) â€” leave empty to log test emails instead of sending
SMTP_HOST=
SMTP_PORT=587
SMTP_SECURE=false
SMTP_USER=
SMTP_PASS=
SMTP_FROM=noreply@localhost
# Default recipient for test endpoint (optional)
NOTIFY_TEST_TO=

# AI service
AI_SERVICE_HOST=0.0.0.0
AI_SERVICE_PORT=4020
AI_SERVICE_URL=http://ai-service:4020
# Optional outputs directory (for dev/local storage)
AI_OUTPUT_DIR=./services/ai-service/out
# Embeddings
OPENAI_API_KEY=
OPENAI_EMBED_MODEL=text-embedding-3-small
# Generation
AI_GENERATION=stub
OPENAI_CHAT_MODEL=gpt-4o-mini

#mode can be "development" or "production"
MODE=development
# Google OAuth
GOOGLE_CLIENT_ID=
GOOGLE_CLIENT_SECRET=
GOOGLE_REDIRECT_URI=http://localhost:3001/api/auth/google/callback
AUTH_GOOGLE_SCOPES=openid email profile
AUTH_GOOGLE_ALLOWED_HD=morgan.edu

# Canvas (token verification only)
# Base URL for your institution's Canvas instance (e.g., https://morganstate.instructure.com)
CANVAS_BASE_URL=
# Symmetric key used to encrypt Canvas tokens at rest (keep secret in real envs)
CANVAS_TOKEN_SECRET=dev-canvas-secret

# Ingestion service
# Host/port
INGESTION_SERVICE_HOST=0.0.0.0
INGESTION_SERVICE_PORT=4010
# Direct URL for callers inside Docker-compose network
INGESTION_SERVICE_URL=http://ingestion-service:4010
# Redis connection (use Docker DNS 'redis'); also used by Canvas async sync
REDIS_URL=redis://redis:6379
INGEST_STREAM=ingest.request
# Canvas async sync stream and group
CANVAS_SYNC_STREAM=canvas.sync.request
CANVAS_SYNC_GROUP=canvas_sync_cg
# Canvas sync feature flags (expanded coverage)
# Include Course Files in sync (true/false)
CANVAS_SYNC_INCLUDE_FILES=true
# Include Pages (HTML) in sync (true/false)
CANVAS_SYNC_INCLUDE_PAGES=true
# Storage provider: 'local' or 'azure'
INGEST_STORAGE_PROVIDER=local
# Local output directory where extracted files are written (mocking blob storage)
INGEST_OUTPUT_DIR=./services/ingestion-service/out
# Azure/Azurite storage settings
# For Azurite (dev), use the emulator connection string with Docker DNS name 'azurite' so
# other containers can reach it (localhost/127.0.0.1 will NOT work from inside Docker):
# - Inside Docker-compose network (recommended):
#AZURE_STORAGE_CONNECTION_STRING=DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFeqCXRdXM==;BlobEndpoint=http://azurite:10000/devstoreaccount1;
# - If Azurite runs on the host (not in compose), from containers use host.docker.internal:
#AZURE_STORAGE_CONNECTION_STRING=DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFeqCXRdXM==;BlobEndpoint=http://host.docker.internal:10000/devstoreaccount1;
#AZURE_STORAGE_CONTAINER=talvra
# Optionally force a storage API version compatible with Azurite:
#AZURE_BLOB_SERVICE_VERSION=2021-08-06
# For real Azure (prod), set the real connection string and preferred container
#AZURE_STORAGE_CONNECTION_STRING=
#AZURE_STORAGE_CONTAINER=

